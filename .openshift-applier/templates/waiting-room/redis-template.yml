apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: redis-persistent-template
metadata:
  name: redis-persistent
  namespace: openshift
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-password: '{.data[''database-password'']}'
      name: '${DATABASE_SERVICE_NAME}'
    stringData:
      database-password: '${REDIS_PASSWORD}'
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: 'redis://{.spec.clusterIP}:{.spec.ports[?(.name=="redis")].port}'
      name: '${DATABASE_SERVICE_NAME}'
    spec:
      ports:
        - name: redis
          nodePort: 0
          port: 6379
          protocol: TCP
          targetPort: 6379
      selector:
        name: '${DATABASE_SERVICE_NAME}'
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: '${DATABASE_SERVICE_NAME}'
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: '${VOLUME_CAPACITY}'
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: 'true'
      labels:
        app: '${APP_NAME}'
      name: '${DATABASE_SERVICE_NAME}'
    spec:
      replicas: 1
      selector:
        name: '${DATABASE_SERVICE_NAME}'
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: '${DATABASE_SERVICE_NAME}'
        spec:
          containers:
            - capabilities: {}
              env:
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: '${DATABASE_SERVICE_NAME}'
              image: ' '
              imagePullPolicy: IfNotPresent
              livenessProbe:
                initialDelaySeconds: 30
                tcpSocket:
                  port: 6379
                timeoutSeconds: 1
              name: redis
              ports:
                - containerPort: 6379
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - '-i'
                    - '-c'
                    - >-
                      test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)"
                      == "PONG"
                initialDelaySeconds: 5
                timeoutSeconds: 1
              resources:
                limits:
                  memory: '${MEMORY_LIMIT}'
                  cpu: '${CPU_LIMIT}'
                requests:
                  cpu: '${CPU_REQUEST}'
                  memory: '${MEMORY_REQUEST}'
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                - mountPath: /var/lib/redis/data
                  name: '${DATABASE_SERVICE_NAME}-data'
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
            - name: '${DATABASE_SERVICE_NAME}-data'
              persistentVolumeClaim:
                claimName: '${DATABASE_SERVICE_NAME}'
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - redis
            from:
              kind: ImageStreamTag
              name: 'redis:${REDIS_VERSION}'
              namespace: '${NAMESPACE}'
            lastTriggeredImage: ''
          type: ImageChange
        - type: ConfigChange
    status: {}
parameters:
  - name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - name: MEMORY_REQUEST
    required: true
    value: 50Mi
  - name: CPU_REQUEST
    required: true
    value: 50m
  - name: CPU_LIMIT
    required: true
    value: 256m
  - name: NAMESPACE
    value: openshift
  - name: DATABASE_SERVICE_NAME
    required: true
    value: redis
  - from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: REDIS_PASSWORD
    required: true
  - name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - name: REDIS_VERSION
    required: true
    value: '3.2'
  - name: APP_NAME
    require: true
    value: waiting-room
